#!/usr/bin/env python
import argparse
import sys, os
import logging

from softwarecorrelator import __version__
from softwarecorrelator.inspect import data_loss_report_ascii, write_inspection_pdf


if __name__ == '__main__':

    #
    # Commandline parsing
    #
    parser = argparse.ArgumentParser(
        description='Produce inspection document for LOFAR complex voltage HDF5 files.')
    parser.add_argument('directory', metavar='DIR', type=str, nargs=1,
                        help='Directory containing HDF5 files and raw files for one LOFAR observation.')

    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s '+__version__+' (c) 2017 M.A. Brentjens <brentjens@astron.nl>')

    parser.add_argument('-o', '--output-dir', metavar='DIRECTORY', type=str,
                        help='Directory in which to write the PDF report. Default: current directory.')

    parser.add_argument('-l', '--logging', metavar='LOGLEVEL', type=str,
                        choices=['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'],
                        default='INFO',
                        help='Minimum log intensity level. Choose one of "CRITICAL", "ERROR", "WARNING", "INFO", or "DEBUG"')
    args = parser.parse_args()


    #
    # Logging setup
    #
    logger = logging.getLogger()
    loglevel = {'INFO':  logging.INFO,
                'DEBUG': logging.DEBUG,
                'WARNING': logging.WARNING,
                'CRITICAL': logging.CRITICAL,
                'ERROR': logging.ERROR}[args.logging]
    logger.setLevel(loglevel)
    formatter = logging.Formatter('CVQA %(asctime)s: %(levelname)s: %(message)s')

    console_handler = logging.StreamHandler()
    console_handler.setLevel(loglevel)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    logging.info('New call to CVQA')
    logging.info(sys.argv)
    logging.info(args)


    #
    # Report generation
    #
    data_loss_report_ascii(args.directory[0])
    output_template=os.path.join(args.output_dir,'%(sas_id)s-%(antenna_set)s-%(obs_datetime)s.pdf')
    output_filename = write_inspection_pdf(
        input_dir_name=args.directory[0],
        output_filename_template=output_template)
    logging.info('Report written to %s', output_filename)
    
